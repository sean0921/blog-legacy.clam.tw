<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sean&#39;s Blog</title>
    <link>https://blog-legacy.clam.tw/</link>
    
    <atom:link href="https://blog-legacy.clam.tw/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Legacy Blog site construted by Hexo</description>
    <pubDate>Mon, 28 Jul 2025 08:07:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>站台即將遷移</title>
      <link>https://blog-legacy.clam.tw/2025/07/28/migrating-to-my-new-site/</link>
      <guid>https://blog-legacy.clam.tw/2025/07/28/migrating-to-my-new-site/</guid>
      <pubDate>Sun, 27 Jul 2025 23:55:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;近期預期嘗試使用 hugo 當 SSG，感覺 IE 很久，也或許有更ㄅㄧㄤˋ的出來了，但總之先做個嘗試吧，趁還玩得動的時候XD。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>近期預期嘗試使用 hugo 當 SSG，感覺 IE 很久，也或許有更ㄅㄧㄤˋ的出來了，但總之先做個嘗試吧，趁還玩得動的時候XD。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog-legacy.clam.tw/tags/clam/">clam</category>
      
      
      <comments>https://blog-legacy.clam.tw/2025/07/28/migrating-to-my-new-site/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>COSCUP 2025 社群徵稿啟動</title>
      <link>https://blog-legacy.clam.tw/2025/03/12/coscup2025/</link>
      <guid>https://blog-legacy.clam.tw/2025/03/12/coscup2025/</guid>
      <pubDate>Wed, 12 Mar 2025 14:05:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;有興趣的各方社群大大們請移駕至 &lt;a href=&quot;https://coscup.org/2025/&quot;&gt;https://coscup.org/2025/&lt;/a&gt; 閱覽最新消息，個人不知道今年有沒有這緣份，但先祝福大家，也希望這社群愈來愈好，其他感想相信大家有緣的話，可以在偶然</description>
        
      
      
      
      <content:encoded><![CDATA[<p>有興趣的各方社群大大們請移駕至 <a href="https://coscup.org/2025/">https://coscup.org/2025/</a> 閱覽最新消息，個人不知道今年有沒有這緣份，但先祝福大家，也希望這社群愈來愈好，其他感想相信大家有緣的話，可以在偶然的機會下看到的。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog-legacy.clam.tw/tags/opensource/">opensource</category>
      
      
      <comments>https://blog-legacy.clam.tw/2025/03/12/coscup2025/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Ubuntu 桌面中使用 Python 將檔案丟到資源回收桶</title>
      <link>https://blog-legacy.clam.tw/2022/05/05/use-glib-gio-in-python3/</link>
      <guid>https://blog-legacy.clam.tw/2022/05/05/use-glib-gio-in-python3/</guid>
      <pubDate>Thu, 05 May 2022 15:02:56 GMT</pubDate>
      
      <description>&lt;p&gt;假如你在 Ubuntu 使用 Python 進行資料處理，對於一些檔案懷抱著想移出視線又怕刪掉就回不去的情感，怎麼辦? 這篇文章介紹的工具與概念，或許可以提供你一個對於整合桌面環境更加友善的方向。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>假如你在 Ubuntu 使用 Python 進行資料處理，對於一些檔案懷抱著想移出視線又怕刪掉就回不去的情感，怎麼辦? 這篇文章介紹的工具與概念，或許可以提供你一個對於整合桌面環境更加友善的方向。</p><span id="more"></span><h2 id="初始情境">初始情境</h2><ul><li>我們在用 Python 進行資料處理的時候，會想將不要的檔案移出工作目錄，但又不想要不小心誤刪檔案而救不回來。類似 mv 的操作也會有同名檔案處理起來相對複雜的問題。</li><li>Python 的標準函式庫的檔案相關操作，無法滿足在桌面使用情境下對應的操作需求，以這邊為例就是<em>把檔案丟到資源回收桶</em>。</li></ul><h2 id="簡化問題">簡化問題</h2><ul><li>我只是想把檔案丟到資源回收筒</li></ul><h2 id="可利用方法">可利用方法</h2><ul><li>我們想要在 GNOME 桌面環境將檔案丟到資源回收桶，有哪些方式呢:<ol><li>使用檔案總管(Nautilus)將檔案拖拉到資源回收桶資料夾</li><li>透過 <code>gio</code> 對檔案進行操作</li><li>透過呼叫 Glib 中 Gio 的相關函式對檔案進行操作</li></ol></li><li>這邊要介紹的主要是第三種，而第二種為第三種的簡易應用。</li></ul><h2 id="甚麼是-Glib、在-Gtk-家族裡的關係">甚麼是 Glib、在 Gtk 家族裡的關係?</h2><ul><li>GLib 是 GNOME 將原本 gtk 函式庫裡面跟圖形介面無關的底層程式碼獨立出來的一個專案, 它們和其他 gtk 相關專案的關係圖如下:<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/GTK%2B_software_architecture.svg/2560px-GTK%2B_software_architecture.svg.png" alt=""></li></ul><h2 id="如何使用-Python-將檔案丟到資源回收桶">如何使用 Python 將檔案丟到資源回收桶</h2><ul><li>首先，作業系統環境一定要安裝 GLib 函式庫，Python 套件則是需要安裝 PyGObject</li><li>若想透過 <code>gio</code> 等 shell 指令直接對 GLib 進行利用，在 Debian/Ubuntu 下需要確認是否有安裝到 <code>libglib2-bin</code> (該類發行版套件會切比較細)</li></ul><h3 id="相關程式碼">相關程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;/path/to/filename&#x27;</span></span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> Gio</span><br><span class="line">a=Gio.File.new_for_path(file_path)</span><br><span class="line"><span class="keyword">if</span> a.trash() == <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_path&#125;</span> is moved to trash!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上程式碼大致可以對應到 <code>gio trash /path/to/filename</code> 這個指令，若是對應圖形介面操作，就是把 <code>/path/to/filename</code> 丟到資源回收桶，完工</p><h2 id="API-Reference">API Reference</h2><p>這邊直接附上 GLib 的函式庫(1)，至於 PyGObject 那一側則還沒找到官方詳細文件，因此先拿它恰巧有出沒過的文件連結(2)替代，若有找到更完整的資料歡迎提供！</p><ol><li><a href="https://lazka.github.io/pgi-docs/Gio-2.0/classes/File.html#Gio.File">https://lazka.github.io/pgi-docs/Gio-2.0/classes/File.html#Gio.File</a></li><li><a href="https://pygobject.readthedocs.io/en/latest/guide/threading.html?highlight=Gio.File#asynchronous-operations">https://pygobject.readthedocs.io/en/latest/guide/threading.html?highlight=Gio.File#asynchronous-operations</a></li></ol><h2 id="應用-send2trash">應用: send2trash</h2><p>於是這樣簡潔方便的介面使得 <a href="https://github.com/arsenetar/send2trash/">send2trash</a> 這個第三方 Python 套件於 2013 年即開始支援以 Gio 來進行檔案移至資源回收筒的<a href="https://github.com/arsenetar/send2trash/blob/master/send2trash/plat_gio.py">實作</a>方式。是不是相當單純呢?</p><h2 id="結語與討論">結語與討論</h2><p>GLib 除了本文介紹的範例外，也有許多有趣的模組與函式可以讓我們探索與應用，理解其概念，也將對我們開發、協助除錯 GNOME、GTK 相關開源桌面程式有莫大幫助，是個值得一探究竟的專案！</p>]]></content:encoded>
      
      
      
      <category domain="https://blog-legacy.clam.tw/tags/linux/">linux</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/opensource/">opensource</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/python/">python</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/GLib/">GLib</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/Gio/">Gio</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/Gtk/">Gtk</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/GNOME/">GNOME</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/data-operation/">data operation</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://blog-legacy.clam.tw/2022/05/05/use-glib-gio-in-python3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何在串流播放器使用 youtube-dl 的替代品 - 以 mpv 為例</title>
      <link>https://blog-legacy.clam.tw/2021/10/16/mpv-ytdl-alternative/</link>
      <guid>https://blog-legacy.clam.tw/2021/10/16/mpv-ytdl-alternative/</guid>
      <pubDate>Fri, 15 Oct 2021 21:19:42 GMT</pubDate>
      
      <description>&lt;p&gt;Youtube-dl 歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，也開始出現了各種替代方案來因應。本篇文章將以 mpv 影音播放器為例，介紹如何在該軟體 0.33 之後的版本快速替換 youtube-dl 外掛所使用的路徑。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Youtube-dl 歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，也開始出現了各種替代方案來因應。本篇文章將以 mpv 影音播放器為例，介紹如何在該軟體 0.33 之後的版本快速替換 youtube-dl 外掛所使用的路徑。</p><span id="more"></span><h2 id="youtube-dl-與-mpv">youtube-dl 與 mpv</h2><p>不想被既有影音平臺使用規則限制的人都知道，除了坊間上流傳來來去去的影音下載網站以外，最知名、自己來用起來最方便的工具就是 youtube-dl 了。而 youtube-dl 除了直接下載各影音網站的內容儲存外，也可以用將它整合到你喜愛的影音播放軟體，直接播放串流影音。這類軟體包含但不限於 <a href="https://mpv.io/">mpv</a> 以及<a href="https://github.com/mpv-player/mpv/wiki/Applications-using-mpv">以它為基礎的播放器</a>。</p><h2 id="如何下載-youtube-dl-與-mpv">如何下載 youtube-dl 與 mpv</h2><p>在 Linux/FreeBSD 平臺上安裝 mpv 是一件極度容易的事情，通常透過套件管理員安裝即可，以 Ubuntu 為例就是: <code>sudo apt install mpv</code> 和 <code>pip3 install --user youtube-dl</code> 。而 Windows 使用者則是可以到 mpv 官網列的<a href="https://mpv.io/installation/">下載列表</a>看哪個安裝方式最符合你的需求，通常我會去<a href="https://sourceforge.net/projects/mpv-player-windows/files/">第一個</a>選「Download Latest Version」來安裝，解壓縮 <code>bootstraper</code> 資料夾點選 <code>update.bat</code> 安裝後，對於所有問題一律按「y」回答，就會把 mpv 和 youtube-dl 都幫你裝好了。剩下如何操作的部分，</p><h2 id="如何用-mpv-播放串流影音">如何用 mpv 播放串流影音</h2><p>若你想透過 mpv 播放你喜歡的影音網址，你可以在安裝完畢後開啟命令列，輸入 <code>mpv &lt;影音網址&gt;</code> 後即可播放，例如嘗試以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mpv https://youtu.be/dQw4w9WgXcQ   ## 支援 YouTube</span><br><span class="line">mpv https://vimeo.com/148751763    ## 支援 Vimeo</span><br></pre></td></tr></table></figure><p>你也可以將瀏覽器上的 youtube 連結拖入已經開啟的 mpv 視窗中:<br><img src="https://i.imgur.com/Ap5bYB1.png" alt=""></p><p>當然如果你有可以存取的 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming">HLS 串流網址</a>，也可以直接丟給 mpv 來播放。</p><p>這樣子當我們不確定 youtube 影片的內容，又不想幫連廢片都不如的內容衝流量，就可以用這樣的方式來觀看，除此之外也仍然有阻擋廣告、硬體解碼(節省電腦運算資源)、一鍵截圖…等結合這兩個軟體各種方便的特性。</p><h2 id="youtube-dl-的爭議與沒落">youtube-dl 的爭議與沒落</h2><p>但這個專案首先歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，最後一次更新的時間是三個月前，上一次釋出版號的時間也已經是四個月前，回不去以往隔數天~一週就釋出新版號的開發節奏了。這也意味著當各大影音平臺改變策略，嘗試阻擋第三方存取的方式時，這個套件將難以再迅速因應。同時也無法再新增其他影音網站平臺的支援。</p><h2 id="youtube-dl-的替代方案">youtube-dl 的替代方案</h2><p>youtube-dl 是基於 <a href="https://unlicense.org/">Unlicence</a> 授權，因此也開始陸續出現許多分支來嘗試繼承開發能量，像 DMCA 下架事件就開始出現 <a href="https://github.com/blackjack4494/yt-dlc">youtube-dlc</a>，但後來也無疾而終。</p><p>而個人關注，且最近還有持續的開發的分支則是 <a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a>, 目前有維持一定的開發節奏且持續釋出新版本，是現階段值得使用的替代方案，也可以改善原版 youtube-dl 偶發性無法存取的問題。</p><p>這些套件都可以透過 <code>pip install --user 套件名稱</code> 來安裝，或是直接到 GitHub Release 頁面下載 exe 檔。</p><h2 id="如何在-mpv-使用-youtube-dl-替代方案">如何在 mpv 使用 youtube-dl 替代方案</h2><p>以下以 yt-dlp 取代 youtube-dl 為例</p><h3 id="重新命名執行檔-不推薦">重新命名執行檔(不推薦)</h3><p>這個方法滿單純的，就是找出 youtube-dl 的執行路徑，Windows 平臺你是在哪個路徑執行 <code>youtube-dl.exe</code> 這個程式，通常會跟 <code>mpv.exe</code> 安裝在同一個資料夾下。Linux/FreeBSD 等平臺則是在一個優先度比較高的 <code>$PATH</code> 路徑下，建立一個軟連結到 yt-dlp 的執行檔路徑。例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -rsv <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.local/bin/yt-dlp&quot;</span> <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.local/bin/youtube-dl&quot;</span>   <span class="comment">## 如果路徑衝突，請自行解決或解除安裝原版 youtube-dl</span></span><br></pre></td></tr></table></figure><h3 id="更改-mpv-設定檔-適用於-0-33-版本">更改 mpv 設定檔 (適用於 &gt;= 0.33 版本)</h3><p>上一個方法看似單純，卻容易在更新套件時把你的環境搞炸。因此我會建議能將 mpv 更新到此版本的使用者都使用此方法。</p><p>首先我們可以先找出 mpv 設定檔的存放路徑，相關說明可以在官方文件找到。Windows 的使用者可以將它放在 <code>%USERPROFILE%\AppData\Roaming\mpv\mpv.conf</code> 或是同資料夾下的 <code>portable_config\mpv.conf</code>，Linux/FreeBSD 使用者則是可以去 <code>~/.config/mpv/mpv.conf</code> 新增或更改自己的設定檔。</p><p>然後我們只需要在設定檔新增以下一行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-opts=ytdl_hook-ytdl_path=/home/user/.local/bin/yt-dlp</span><br></pre></td></tr></table></figure><p>(<code>/home/user/.local/bin/yt-dlp</code> 改成你放 yt-dlp 執行檔的路徑)</p><p>這樣就不用更改任何環境變數、改檔名或是建立軟連結囉！</p><h3 id="Ubuntu-Debian-Linux-使用者如何更新-mpv-到-0-33-版本">Ubuntu/Debian Linux 使用者如何更新 mpv 到 &gt;= 0.33 版本?</h3><p>從 <a href="https://salsa.debian.org/multimedia-team/mpv">Debian Salsa</a> 平臺可以看到，Debian 的維護者已經將最新版的 mpv 打包進 unstable 了，如果想在 Debian 11(stable) 或是 Ubuntu LTS 版本，都可以參考 Debian 的 <a href="https://wiki.debian.org/BuildingTutorial">Building Tutorial</a> 來打包你想要的套件版本，另外 Debian 11 的使用者也可以使用 <a href="/2021/08/22/project-ctpb/">CTPB 專案</a>幫你包好的 mpv 0.33.1 套件，讓你在 Debian 上更輕易的享受新版 mpv 的特性！</p><h2 id="結語">結語</h2><p>當我們觀看著影音的同時，我們也正在被平台提供商用各種意想不到的方式觀看著！<br>當然我們也可以積極關注更為開放、重視分享精神的影音平臺: 像是 <a href="https://wiwi.video/about/instance">wiwi</a> 推薦的 <a href="https://zh.wikipedia.org/wiki/PeerTube">PeerTube</a> 或 <a href="https://zh.wikipedia.org/wiki/LBRY">LBRY</a>。</p><p>但短時間內我們無法構造改革，因此我們使用這些工具，來讓我們仍然保有不被平臺限制使用存取方式的選擇，也能讓觀看影片的體驗更加彈性，應用到更多層面。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog-legacy.clam.tw/tags/youtube-dl/">youtube-dl</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/mpv/">mpv</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/yt-dlp/">yt-dlp</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/video-streaming/">video-streaming</category>
      
      
      <comments>https://blog-legacy.clam.tw/2021/10/16/mpv-ytdl-alternative/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Project CTPB 簡介</title>
      <link>https://blog-legacy.clam.tw/2021/08/22/project-ctpb/</link>
      <guid>https://blog-legacy.clam.tw/2021/08/22/project-ctpb/</guid>
      <pubDate>Sun, 22 Aug 2021 06:02:36 GMT</pubDate>
      
      <description>&lt;p&gt;在 2021 年，Linux 發行版等開源作業系統的普及率仍無法與 Microsoft Windows、Mac OS 等相比，但相關生態系與商業應用與 10 年前相比已有明顯成長，然而在 Linux 發行版的軟體安裝上，仍因為安裝方式不一，操作指令過於多樣，甚至多數商業軟體公司發行的開源/非開源套件是以「把所有用到函式庫都包在一起的方式」發行軟體，以方便忽視軟體相依性之問題，卻明顯違背了 Linux 發行版套件管理機制最初的用意。&lt;/p&gt;
&lt;p&gt;本專案，Clam-Test Package Build Project，簡稱 Project CTPB，藉由簡化、粗略的套件打包原理，提供各(非滾動式為主)發行版沒有提供，或是有提供但版本無法滿足特定需求的客製化套件。以滿足個人與特定需求使用者需要。並將相關步驟原理整理起來，作為研究、討論、交流、推廣等用途。往後相關資訊將會更新在本文章內文。或是以 &lt;em&gt;pj-ctpb&lt;/em&gt; 的標籤發表新的 blog 系列文章，以供各界朋友指教。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在 2021 年，Linux 發行版等開源作業系統的普及率仍無法與 Microsoft Windows、Mac OS 等相比，但相關生態系與商業應用與 10 年前相比已有明顯成長，然而在 Linux 發行版的軟體安裝上，仍因為安裝方式不一，操作指令過於多樣，甚至多數商業軟體公司發行的開源/非開源套件是以「把所有用到函式庫都包在一起的方式」發行軟體，以方便忽視軟體相依性之問題，卻明顯違背了 Linux 發行版套件管理機制最初的用意。</p><p>本專案，Clam-Test Package Build Project，簡稱 Project CTPB，藉由簡化、粗略的套件打包原理，提供各(非滾動式為主)發行版沒有提供，或是有提供但版本無法滿足特定需求的客製化套件。以滿足個人與特定需求使用者需要。並將相關步驟原理整理起來，作為研究、討論、交流、推廣等用途。往後相關資訊將會更新在本文章內文。或是以 <em>pj-ctpb</em> 的標籤發表新的 blog 系列文章，以供各界朋友指教。</p><span id="more"></span><h2 id="第一階段-apt-ftparchive-gpg-github-page">第一階段: apt-ftparchive + gpg + github-page</h2><ul><li>網址: <a href="https://gh.pkg.clam.ml/">https://gh.pkg.clam.ml/</a></li></ul><p>To be continued…</p>]]></content:encoded>
      
      
      
      <category domain="https://blog-legacy.clam.tw/tags/packaging/">packaging</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/linux/">linux</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/opensource/">opensource</category>
      
      <category domain="https://blog-legacy.clam.tw/tags/pj-ctpb/">pj-ctpb</category>
      
      
      <comments>https://blog-legacy.clam.tw/2021/08/22/project-ctpb/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
